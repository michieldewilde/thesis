@article{Mirashe2010,
abstract = {Computing as you know it is about to change, your applications and documents are going to move from the desktop into the cloud. I'm talking about cloud computing, where applications and files are hosted on a "cloud" consisting of thousands of computers and servers, all linked together and accessible via the Internet. With cloud computing, everything you do is now web based instead of being desktop based. You can access all your programs and documents from any computer that's connected to the Internet. How will cloud computing change the way you work? For one thing, you're no longer tied to a single computer. You can take your work anywhere because it's always accessible via the web. In addition, cloud computing facilitates group collaboration, as all group members can access the same programs and documents from wherever they happen to be located. Cloud computing might sound far-fetched, but chances are you're already using some cloud applications. If you're using a web-based email program, such as Gmail or Hotmail, you're computing in the cloud. If you're using a web-based application such as Google Calendar or Apple Mobile Me, you're computing in the cloud. If you're using a file- or photo-sharing site, such as Flickr or Picasa Web Albums, you're computing in the cloud. It's the technology of the future, available to use today.},
archivePrefix = {arXiv},
arxivId = {1003.4074},
author = {Bala, Vasanth and Duesterwald, Evelyn and Banerjia, Sanjeev},
doi = {10.1145/358438.349303},
eprint = {1003.4074},
isbn = {1-58113-199-2},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
number = {5},
pages = {1--12},
pmid = {22988693},
title = {{Dynamo}},
url = {http://portal.acm.org/citation.cfm?doid=358438.349303},
volume = {35},
year = {2000}
}
@article{Ballesteros,
author = {Ballesteros, Francisco J},
file = {:Users/Coding/Dropbox/2015-2016/thesis/clivesys (1).pdf:pdf},
title = {{The Clive Operating System}}
}
@article{Beloglazov2010,
abstract = {Rapid growth of the demand for computational power by scientific, business and web-applications has led to the creation of large-scale data centers consuming enormous amounts of electrical power. We propose an energy efficient resource management system for virtualized Cloud data centers that reduces operational costs and provides required Quality of Service (QoS). Energy savings are achieved by continuous consolidation of VMs according to current utilization of resources, virtual network topologies established between VMs and thermal state of computing nodes. We present first results of simulation-driven evaluation of heuristics for dynamic reallocation of VMs using live migration according to current requirements for CPU performance. The results show that the proposed technique brings substantial energy savings, while ensuring reliable QoS. This justifies further investigation and development of the proposed resource management system. {\textcopyright} 2010 IEEE.},
author = {Beloglazov, Anton and Buyya, Rajkumar},
doi = {10.1109/CCGRID.2010.46},
isbn = {978-1-4244-6987-1},
journal = {2010 10th IEEE/ACM International Conference on Cluster, Cloud and Grid Computing},
keywords = {Allocation of virtual machines,Cloud computing,Energy consumption,Energy efficiency,Green IT,Live migration of virtual machines,Resource management,Virtualization},
pages = {826--831},
title = {{Energy Efficient Resource Management in Virtualized Cloud Data Centers}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77954894902{\&}partnerID=tZOtx3y1},
year = {2010}
}
@book{Chisnall2014,
abstract = {Xen is a virtualization tool, but what does this mean? In this chapter, we will explore some of the history of virtualization, and some of the reasons why people found, and continue to find, it useful. We will have a look in particular at the x86, or IA32, architecture, why it presents such a problem for virtualization, and some possible ways around these limitations from other virtualization systems and finally from Xen itself.},
author = {Chisnall, David},
booktitle = {Psychological Science},
keywords = {xen hypervisor virtualization},
number = {9},
pages = {307},
title = {{The Definitive Guide to the Xen Hypervisor}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/15003161$\backslash$nhttp://cid.oxfordjournals.org/lookup/doi/10.1093/cid/cir991$\backslash$nhttp://www.scielo.cl/pdf/udecada/v15n26/art06.pdf$\backslash$nhttp://www.scopus.com/inward/record.url?eid=2-s2.0-84861150233{\&}partnerID=tZOtx3y1},
volume = {25},
year = {2014}
}
@misc{Docker2016,
author = {Docker},
title = {{Docker}},
url = {https://www.docker.com/},
urldate = {2016-05-17},
year = {2016}
}
@article{Kantee2015,
abstract = {studies of human–computer interaction [HCI] are commonly limited to micro-level interactions between programmers or users and computers / [suggests that the] varied uses of computers as technologies embedded in other artifacts, typically consumer electronics, appliances, and machinery of all kinds, are seldom examined in HCI studies / analyzes the rise and fall of a technological innovation, focusing on and interrelating both macro- and microlevel events and interactions / the artifact we analyze, the Postal Buddy kiosk, was not identified as a "computer" by its users, yet its functioning was entirely based on sophisticated computer technology embedded within the artifact (PsycINFO Database Record (c) 2012 APA, all rights reserved)},
author = {Engestr{\"{o}}m, Yrj{\"{o}} and Escalante, Virginia},
doi = {AE 2013029},
file = {:Users/Coding/Dropbox/2015-2016/thesis/login{\_}oct15{\_}02{\_}kantee.pdf:pdf},
isbn = {0-262-14058-6 (Hardcover)},
issn = {14701006},
journal = {Context and consciousness: Activity theory and human–computer interaction},
keywords = {*Computer Applications,*Computers,Human Machine Systems},
pages = {325--374},
pmid = {398002257},
title = {{Mundane tool or object of affection? The rise and fall of the Postal Buddy.}},
year = {1996}
}
@article{Farinier2014,
author = {Farinier, B and Gazagnaire, T},
file = {:Users/Coding/Dropbox/2015-2016/thesis/2015-jfla-irmin.pdf:pdf},
journal = {Journal of Discrete {\ldots}},
pages = {1--13},
title = {{Mergeable persistent data structures}},
year = {2014}
}
@article{GarciaVillalba2015,
abstract = {Software defined networking (SDN) and network function virtualisation (NFV) have become hot topics in recent years. On one hand, SDN decouples the control plane from the data plane allowing the rapid innovation and the introduction of new services in an easy way. On the other hand, currently proprietary appliances such as load balancers and firewalls are implemented in hardware, NFV aims to change these network functions to an open software environment using virtualisation and cloud technologies. This means a reduction of spends in the provisioning and management of telecom services. SDN and NFV are two different concepts but these can coexist and help each other. In this study, the authors present a survey of SDN and NFV focusing in virtualisation projects and the use cases where a synergy between these technologies is possible. This study includes the basic concepts of network virtualisation, NFV and SDN, current research and the relation between both technologies.},
author = {{Garc{\'{i}}a Villalba}, Luis Javier and {Valdivieso Caraguay}, {\'{A}}ngel Leonardo and {Barona L{\'{o}}pez}, Lorena Isabel and L{\'{o}}pez, Diego},
journal = {IET Networks},
number = {5},
pages = {255--263},
title = {{Trends on virtualisation with software defined networking and network function virtualisation}},
url = {http://digital-library.theiet.org/content/journals/10.1049/iet-net.2014.0117},
volume = {4},
year = {2015}
}
@misc{Hykes2013,
author = {Hykes, Solomon},
booktitle = {21/03/2013},
title = {{The future of Linux Containers}},
urldate = {2016-05-17},
year = {2013}
}
@article{Kaloper-Mersinjak2015,
author = {Kaloper-Mer{\v{s}}injak, D},
file = {:Users/Coding/Dropbox/2015-2016/thesis/2015-nqsbtls-usenixsec.pdf:pdf},
journal = {24th USENIX Security  {\ldots}},
title = {{Not-quite-so-broken TLS: lessons in re-engineering a security protocol specification and implementation}},
url = {http://anil.recoil.org/papers/2015-usenixsec-nqsb.pdf},
year = {2015}
}
@misc{Linux,
author = {Linux},
title = {{Chroot}},
url = {http://man7.org/linux/man-pages/man2/chroot.2.html},
urldate = {2016-05-17}
}
@article{Madhavapeddy2015,
abstract = {Network latency is a problem for all cloud services. It can be mitigated by moving computation out of remote datacenters by rapidly instantiating local services near the user. This requires an embedded cloud platform on which to deploy multiple applications securely and quickly. We present Jitsu, a new Xen toolstack that satisfies the demands of secure multi-tenant isolation on resource-constrained embedded ARM devices. It does this by using unikernels: lightweight, compact, single address space, memory-safe virtual machines (VMs) written in a high-level language. Using fast shared memory channels, Jitsu provides a directory service that launches unikernels in response to network traffic and masks boot latency. Our evaluation shows Jitsu to be a power-efficient and responsive platform for hosting cloud services in the edge network while preserving the strong isolation guarantees of a type-1 hypervisor},
author = {Madhavapeddy, Anil and Leonard, Thomas and Skjegstad, Magnus and Gazagnaire, Thomas and Sheets, David and Scott, Dave and Mortier, Richard and Chaudhry, Amir and Singh, Balraj and Ludlam, Jon and Crowcroft, Jon and Leslie, Ian},
file = {:Users/Coding/Dropbox/2015-2016/thesis/2015-nsdi-jitsu.pdf:pdf},
isbn = {9781931971218},
journal = {USENIX Symposium on Networked Systems Design and Implementation (NSDI)},
pages = {559----573},
title = {{Jitsu: Just-in-time summoning of unikernels}},
url = {https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-madhavapeddy.pdf},
year = {2015}
}
@article{Madhavapeddy2013,
abstract = {We present unikernels, a new approach to deploying cloud services via applications written in high-level source code. Unikernels are single-purpose appliances that are compile-time specialised into standalone kernels, and sealed against modification when deployed to a cloud platform. In return they offer significant reduction in image sizes, improved efficiency and security, and should reduce operational costs. Our Mirage prototype compiles OCaml code into unikernels that run on commodity clouds and offer an order of magnitude reduction in code size without significant performance penalty. The architecture combines static type-safety with a single address-space layout that can be made immutable via a hypervisor extension. Mirage contributes a suite of type-safe protocol libraries, and our results demonstrate that the hypervisor is a platform that overcomes the hardware compatibility issues that have made past library operating systems impractical to deploy in the real-world.},
author = {Madhavapeddy, Anil and Mortier, Richard and Rotsos, Charalampos and Scott, David and Singh, Balraj and Gazagnaire, Thomas and Smith, Steven and Hand, Steven and Crowcroft, Jon},
doi = {10.1145/2499368.2451167},
file = {:Users/Coding/Dropbox/2015-2016/thesis/2013-asplos-mirage.pdf:pdf},
isbn = {978-1-4503-1870-9},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
keywords = {functional programming,hypervisor,microkernel},
number = {4},
pages = {461},
title = {{Unikernels}},
url = {http://dl.acm.org/citation.cfm?doid=2499368.2451167},
volume = {48},
year = {2013}
}
@article{Madhavapeddy2014,
abstract = {What if all the software layers in a virtual appliance were compiled within the same safe, high-level language framework?},
author = {Madhavapeddy, Anil and Scott, David J.},
doi = {10.1145/2541883.2541895},
file = {:Users/Coding/Dropbox/2015-2016/thesis/2014-cacm-unikernels.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
number = {1},
pages = {61--69},
title = {{Unikernels}},
url = {http://dl.acm.org/citation.cfm?doid=2541883.2541895},
volume = {57},
year = {2014}
}
@inproceedings{Mao2012,
abstract = {One of many advantages of the cloud is the elasticity, the ability to dynamically acquire or release computing resources in response to demand. However, this elasticity is only meaningful to the cloud users when the acquired Virtual Machines (VMs) can be provisioned in time and be ready to use within the user expectation. The long unexpected VM startup time could result in resource under-provisioning, which will inevitably hurt the application performance. A better understanding of the VM startup time is therefore needed to help cloud users to plan ahead and make in-time resource provisioning decisions. In this paper, we study the startup time of cloud VMs across three real-world cloud providers -- Amazon EC2, Windows Azure and Rackspace. We analyze the relationship between the VM startup time and different factors, such as time of the day, OS image size, instance type, data center location and the number of instances acquired at the same time. We also study the VM startup time of spot instances in EC2, which show a longer waiting time and greater variance compared to on-demand instances.},
author = {Mao, Ming and Humphrey, Marty},
booktitle = {Proceedings - 2012 IEEE 5th International Conference on Cloud Computing, CLOUD 2012},
doi = {10.1109/CLOUD.2012.103},
isbn = {9780769547558},
issn = {2159-6182},
keywords = {VM startup/acquisition/spinup time,cloud computing,performance study,spot instances},
pages = {423--430},
title = {{A performance study on the VM startup time in the cloud}},
year = {2012}
}
@article{Mortleman2009,
abstract = {The article discusses the views of information technology experts on the benefits of virtualisation or virtual networks. Ian Pratt, vice president of advanced products at Citrix Systems Inc. says that on a laptop, virtualisation is about providing secure isolation for virtual environments. Richard Jacobs, chief technical officer at Sophos says that virtualisation helps them getting people work from home. Jon Collins, at Freeform Dynamics, says that virtualisation improves security.},
author = {Mortleman, Jim},
journal = {Computer Weekly},
pages = {23},
title = {{Security Advantages of Virtualisation}},
url = {http://search.ebscohost.com/login.aspx?direct=true{\&}db=buh{\&}AN=40090750{\&}site=ehost-live{\&}scope=site},
year = {2009}
}
@misc{Oracle2016a,
author = {Oracle},
title = {{Solaris}},
url = {https://www.oracle.com/solaris},
urldate = {2016-05-17},
year = {2016}
}
@misc{Oracle2016,
author = {Oracle},
title = {{Oracle Virtualbox}},
url = {https://www.virtualbox.org/},
urldate = {2016-05-17},
year = {2016}
}
@article{Ridge2015,
abstract = {Systems depend critically on the behaviour of file systems, but that behaviour differs in many details, both between implementations and between each implementation and the POSIX (and other) prose specifications. Building robust and portable software requires understanding these details and differences, but there is currently no good way to systematically describe, investigate, or test file system behaviour across this complex multi-platform interface. In this paper we show how to characterise the envelope of allowed behaviour of file systems in a form that enables practical and highly discriminating testing. We give a mathematically rigorous model of file system behaviour, SibylFS, that specifies the range of allowed behaviours of a file system for any sequence of the system calls within our scope, and that can be used as a test oracle to decide whether an observed trace is allowed by the model, both for validating the model and for testing file systems against it. SibylFS is modular enough to not only describe POSIX, but also specific Linux, OS X and FreeBSD behaviours. We complement the model with an extensive test suite of over 21,000 tests; this can be run on a target file system and checked in less than 5 minutes, making it usable in practice. Finally, we report experimental results for around 40 configurations of many file systems, identifying many differences and some serious flaws.},
author = {Ridge, Tom and Sheets, David and Tuerk, Thomas and Giugliano, Andrea and Madhavapeddy, Anil and Sewell, Peter},
doi = {10.1145/2815400.2815411},
file = {:Users/Coding/Dropbox/2015-2016/thesis/2015-sibylfs-sosp.pdf:pdf},
isbn = {9781450338349},
journal = {Proceedings of the 25th Symposium on Operating Systems Principles - SOSP '15},
pages = {38--53},
title = {{SibylFS}},
url = {http://dl.acm.org/citation.cfm?doid=2815400.2815411},
year = {2015}
}
@article{Soltesz2007,
abstract = {Hypervisors, popularized by Xen and VMware, are quickly becoming commodity. They are appropriate for many usage scenarios, but there are scenarios that require system virtualization with high degrees of both isolation and efficiency. Examples include HPC clusters, the Grid, hosting centers, and PlanetLab. We present an alternative to hypervisors that is better suited to such scenarios. The approach is a synthesis of prior work on resource containers and security containers applied to general-purpose, time-shared operating systems. Examples of such container-based systems include Solaris 10, Virtuozzo for Linux, and Linux-VServer. As a representative instance of container-based systems, this paper describes the design and implementation of Linux-VServer. In addition, it contrasts the architecture of Linux-VServer with current generations of Xen, and shows how Linux-VServer provides comparable support for isolation and superior system efficiency.},
author = {Soltesz, Stephen and P{\"{o}}tzl, Herbert and Fiuczynski, Marc E. and Bavier, Andy and Peterson, Larry},
journal = {ACM SIGOPS Operating Systems Review},
number = {3},
pages = {275},
title = {{Container-based operating system virtualization}},
volume = {41},
year = {2007}
}
@article{Soundararajan2010,
abstract = {Virtualization has the potential to dramatically reduce the total cost of ownership of datacenters and increase the flexibility of deployments for general-purpose workloads. If present trends continue, the datacenter of the future will be largely virtualized. The base platform in such a datacenter will consist of physical hosts that run hypervisors, and workloads will run within virtual machines on these platforms. From a system management perspective, the virtualized environment enables a number of new workflows in the datacenter. These workflows involve operations on the physical hosts themselves, such as upgrading the hypervisor, as well as operations on the virtual machines, such as reconfiguration or reverting from snapshots. While traditional datacenter design has focused on the cost vs. capability tradeoffs for the end-user applications running in the datacenter, we argue that the management workload from these workflows must be factored into the design of the virtualized datacenter. In this paper, we examine data from real-world virtualized deployments to characterize common management workflows and assess their impact on resource usage in the datacenter. We show that while many end-user applications are fairly light on I/O requirements, the management workload has considerable network and disk I/O requirements. We show that the management workload scales with the increasing compute power in the datacenter. Finally, we discuss the implications of this management workload for the datacenter.},
author = {Soundararajan, Vijayaraghavan and Anderson, Jennifer M.},
journal = {ACM SIGARCH Computer Architecture News},
keywords = {all or part of,cloud computing,datacenter,management,management workload,or hard copies of,permission to make digital,this work for,virtual machine management},
number = {3},
pages = {326},
title = {{The impact of management operations on the virtualized datacenter}},
volume = {38},
year = {2010}
}
@misc{Unikern,
author = {{Unikernel Systems}},
booktitle = {21/01/2016},
keywords = {unikernel},
mendeley-tags = {unikernel},
title = {{Unikernels}},
url = {http://unikernel.org/},
urldate = {2016-05-10},
year = {2016}
}
@misc{VMware2016a,
author = {VMware},
title = {{VMware ESXi}},
urldate = {2016-05-17},
year = {2016}
}
@misc{VMware2016,
author = {VMware},
title = {{VMware Workstation}},
url = {http://www.vmware.com/products/workstation/},
urldate = {2016-05-17},
year = {2016}
}
@misc{Wikipedia,
author = {Wikipedia},
title = {{Docker (software)}},
url = {https://en.wikipedia.org/wiki/Docker{\_}{\%}28software{\%}29},
urldate = {2016-05-16}
}
@misc{Wikipediaa,
author = {Wikipedia},
title = {{DevOps}},
url = {https://en.wikipedia.org/wiki/DevOps}
}
@misc{XenProject2016,
author = {{Xen Project}},
title = {{Xen Project}},
url = {http://xenproject.org/},
urldate = {2016-05-17},
year = {2016}
}
@article{Yallop,
author = {Yallop, Jeremy and Sheets, David and Madhavapeddy, Anil},
file = {:Users/Coding/Dropbox/2015-2016/thesis/2016-cmeleon-flops.pdf:pdf},
title = {{Declarative foreign function binding through generic programming}}
}
@article{Merkel2014,
abstract = {Docker promises the ability to package applications and their dependencies into lightweight containers that move easily between different distros, start up quickly and are isolated from each other.},
author = {Merkel, Dirk},
journal = {Linux Journal},
number = {239},
pages = {2},
publisher = {Belltown Media},
title = {{Docker: lightweight Linux containers for consistent development and deployment}},
url = {http://dl.acm.org/ft{\_}gateway.cfm?id=2600241{\&}type=html$\backslash$nhttp://www.linuxjournal.com/content/docker-lightweight-linux-containers-consistent-development-and-deployment},
volume = {2014},
year = {2014}
}
@misc{Containers,
author = {Containers, Linux},
title = {{Linux Containers}},
url = {https://linuxcontainers.org/lxc/},
urldate = {17/05/2016}
}
